'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var firebaseApp = require('firebase/app');
require('firebase/auth');

var FirebaseProviderContext =
/*#__PURE__*/
React.createContext({});

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var initialState = {
  loading: true,
  firebase: null,
  user: null
};
var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'FIREBASE_LOADED':
      return _extends({}, state, {
        firebase: action.payload
      });

    case 'USER_CHANGE':
      return _extends({}, state, {
        loading: false,
        user: action.payload
      });

    default:
      throw new Error('Invalid action');
  }
};

var FirebaseProvider = function FirebaseProvider(props) {
  var _useReducer = React.useReducer(reducer, initialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  React.useEffect(function () {
    // Initialize Firebase app on mount and config changes
    var firebase = firebaseApp.initializeApp(props.config);
    dispatch({
      type: 'FIREBASE_LOADED',
      payload: firebase
    });
  }, [props.config]);
  React.useEffect(function () {
    // Check if Firebase instance is valid
    if (!state.firebase) {
      return;
    } // Subscribe to user auth changes


    var unsubscribe = firebaseApp.auth().onAuthStateChanged(function (user) {
      dispatch({
        type: 'USER_CHANGE',
        payload: user
      });
    }); // Cleanup subscription on unmount

    return function () {
      return unsubscribe();
    };
  }, [state.firebase]); // If Firebase isn't ready return null

  if (!state.firebase) {
    return null;
  }

  return React__default.createElement(FirebaseProviderContext.Provider, {
    value: {
      firebase: state.firebase,
      user: state.user,
      loading: state.loading
    }
  }, props.children);
};

var useFirebase = function useFirebase() {
  return React.useContext(FirebaseProviderContext);
};

exports.FirebaseProvider = FirebaseProvider;
exports.FirebaseProviderContext = FirebaseProviderContext;
exports.useFirebase = useFirebase;
//# sourceMappingURL=react-use-firebase-hook.cjs.development.js.map
