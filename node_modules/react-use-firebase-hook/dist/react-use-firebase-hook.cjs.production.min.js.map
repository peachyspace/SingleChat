{"version":3,"file":"react-use-firebase-hook.cjs.production.min.js","sources":["../src/FirebaseProviderContext.ts","../src/reducer.ts","../src/FirebaseProvider.tsx","../src/useFirebase.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { FirebaseProviderContextType } from './types';\n\nexport const FirebaseProviderContext = createContext<\n  FirebaseProviderContextType\n>({} as FirebaseProviderContextType);\n","import { Action, InternalState } from './types';\n\nexport const initialState: InternalState = {\n  loading: true,\n  firebase: null,\n  user: null,\n};\n\nexport const reducer = (\n  state: InternalState,\n  action: Action\n): InternalState => {\n  switch (action.type) {\n    case 'FIREBASE_LOADED':\n      return {\n        ...state,\n        firebase: action.payload,\n      };\n    case 'USER_CHANGE':\n      return {\n        ...state,\n        loading: false,\n        user: action.payload,\n      };\n    default:\n      throw new Error('Invalid action');\n  }\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { FirebaseProviderContext } from './FirebaseProviderContext';\nimport { initialState, reducer } from './reducer';\nimport { FirebaseProviderProps } from './types';\nimport * as firebaseApp from 'firebase/app';\nimport 'firebase/auth';\n\nexport const FirebaseProvider = (props: FirebaseProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    // Initialize Firebase app on mount and config changes\n    const firebase = firebaseApp.initializeApp(props.config);\n    dispatch({ type: 'FIREBASE_LOADED', payload: firebase });\n  }, [props.config]);\n\n  useEffect(() => {\n    // Check if Firebase instance is valid\n    if (!state.firebase) {\n      return;\n    }\n\n    // Subscribe to user auth changes\n    const unsubscribe = firebaseApp.auth().onAuthStateChanged(user => {\n      dispatch({\n        type: 'USER_CHANGE',\n        payload: user,\n      });\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, [state.firebase]);\n\n  // If Firebase isn't ready return null\n  if (!state.firebase) {\n    return null;\n  }\n\n  return (\n    <FirebaseProviderContext.Provider\n      value={{\n        firebase: state.firebase,\n        user: state.user,\n        loading: state.loading,\n      }}\n    >\n      {props.children}\n    </FirebaseProviderContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { FirebaseProviderContext } from './FirebaseProviderContext';\nimport { FirebaseProviderContextType } from './types';\n\nexport const useFirebase = (): FirebaseProviderContextType => {\n  return useContext(FirebaseProviderContext);\n};\n"],"names":["FirebaseProviderContext","createContext","initialState","loading","firebase","user","reducer","state","action","type","payload","Error","props","useReducer","dispatch","useEffect","firebaseApp","config","unsubscribe","onAuthStateChanged","React","Provider","value","children","useContext"],"mappings":"2MAGaA,EAA0BC,gBAErC,mNCHK,IAAMC,EAA8B,CACzCC,SAAS,EACTC,SAAU,KACVC,KAAM,MAGKC,EAAU,SACrBC,EACAC,UAEQA,EAAOC,UACR,8BAEEF,GACHH,SAAUI,EAAOE,cAEhB,0BAEEH,GACHJ,SAAS,EACTE,KAAMG,EAAOE,wBAGT,IAAIC,MAAM,6CClBU,SAACC,SACLC,aAAWP,EAASJ,GAAvCK,OAAOO,cAEdC,aAAU,eAEFX,EAAWY,gBAA0BJ,EAAMK,QACjDH,EAAS,CAAEL,KAAM,kBAAmBC,QAASN,MAC5C,CAACQ,EAAMK,SAEVF,aAAU,cAEHR,EAAMH,cAKLc,EAAcF,SAAmBG,oBAAmB,SAAAd,GACxDS,EAAS,CACPL,KAAM,cACNC,QAASL,cAKN,kBAAMa,QACZ,CAACX,EAAMH,WAGLG,EAAMH,SAKTgB,gBAACpB,EAAwBqB,UACvBC,MAAO,CACLlB,SAAUG,EAAMH,SAChBC,KAAME,EAAMF,KACZF,QAASI,EAAMJ,UAGhBS,EAAMW,UAXF,4DChCgB,kBAClBC,aAAWxB"}